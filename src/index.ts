import { app, BrowserWindow, ipcMain } from 'electron';
import { Library, Settings } from "./api/Settings";
import createPlayer from "play-sound";
import fs from 'fs';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const settings = {
  audioFolder: "/Users/okarpuhin/projects/easy-learn/resources/audio",
  openDevTools: true,
};

function readLibraries(relativeFolderPath?: string): Library[] {
  let libraries: Library[] = [];

  let maybeCurrentLibrary: Library = { name: relativeFolderPath, cards: [] };

  fs.readdirSync(settings.audioFolder + (relativeFolderPath ? "/" + relativeFolderPath : "")).forEach(file => {
    let relativeFilePath = (relativeFolderPath ? relativeFolderPath + "/" : "") + file;
    if (fs.statSync(settings.audioFolder + "/" + relativeFilePath).isDirectory()) {
      readLibraries(relativeFilePath).forEach(l => libraries.push(l));
    } else {
      if (file.endsWith(".mp3")) {
        maybeCurrentLibrary.cards.push({ name: file.substring(0, file.length - 4) });
      }
    }
  });

  if (maybeCurrentLibrary.cards.length > 0) {
    libraries.push(maybeCurrentLibrary);
  }

  return libraries
}

ipcMain.on('get-settings', (event) => {
  const settings: Settings = {
    libraries: readLibraries(),
  };
  event.sender.send('send-settings', settings);
});

var player = createPlayer({})
ipcMain.on('play-audio', (event, audio) => {
  player.play(settings.audioFolder + "/" + audio);
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: settings.openDevTools ? 800 : 400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (settings.openDevTools) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
